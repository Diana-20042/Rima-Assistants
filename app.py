import os
from dotenv import load_dotenv
import openai
from elevenlabs import generate, play
import sqlite3
from datetime import datetime
import gradio as gr
from textblob import TextBlob
import random
from typing import List, Tuple

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –†–∏–º—ã ---
rima = {
    "name": "–†–∏–º–∞",
    "voice": "Bella",
    "age": 25,
    "avatar": "avatar.jpg",
    "traits": ["—ç–º–ø–∞—Ç–∏—á–Ω–∞—è", "–∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∞—è", "–æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è"],
    "memory": {
        "learned_phrases": {},
        "emotional_triggers": {}
    },
    "behavior": {
        "sarcasm_level": 0.3,
        "empathy_level": 0.9
    }
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API ---
openai.api_key = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API = os.getenv("ELABS_KEY")

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect("rima_ai.db")
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS memory (
            id INTEGER PRIMARY KEY,
            user_text TEXT,
            bot_text TEXT,
            timestamp DATETIME,
            sentiment REAL,
            emotion TEXT
        )
    """)
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS learned_patterns (
            pattern TEXT PRIMARY KEY,
            response TEXT,
            usage_count INTEGER DEFAULT 1,
            usefulness REAL DEFAULT 1.0
        )
    """)
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_profile (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —ç–º–æ—Ü–∏–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS emotional_triggers (
            emotion TEXT,
            trigger_text TEXT,
            response_template TEXT
        )
    """)
    
    # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    cursor.execute("""
        INSERT OR IGNORE INTO emotional_triggers VALUES
        ('anger', '–±–µ—Å–∏—Ç', '–Ø –≤–∏–∂—É, —á—Ç–æ —Ç–µ–±—è —ç—Ç–æ –∑–ª–∏—Ç. –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º...'),
        ('sadness', '–≥—Ä—É—Å—Ç–Ω–æ', '–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ. *–æ–±–Ω–∏–º–∞–µ—Ç*')
    """)
    
    conn.commit()
    return conn, cursor

conn, cursor = init_db()

# --- –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π ---
def analyze_emotion(text: str) -> dict:
    analysis = TextBlob(text)
    polarity = analysis.sentiment.polarity
    
    emotions = {
        "anger": ["–±–µ—Å–∏—Ç", "–∑–ª—é—Å—å", "–Ω–µ–Ω–∞–≤–∏–∂—É"],
        "joy": ["—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–ª—é–±–ª—é"],
        "sadness": ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–∞–∫–∞—Ç—å", "—Ç–æ—Å–∫–∞"]
    }
    
    detected = []
    for emotion, keywords in emotions.items():
        if any(word in text.lower() for word in keywords):
            detected.append(emotion)
    
    return {
        "polarity": round(polarity, 2),
        "emotions": detected or ["neutral"]
    }

# --- –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏ ---
def get_cached_response(message: str) -> str:
    cursor.execute("""
        SELECT response FROM learned_patterns
        WHERE ? LIKE '%' || pattern || '%'
        ORDER BY usefulness DESC
        LIMIT 1
    """, (message,))
    return cursor.fetchone()[0] if cursor.fetchone() else None

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
def generate_new_response(message: str, emotion: dict) -> str:
    try:
        # –ò—â–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        cursor.execute("""
            SELECT response_template FROM emotional_triggers
            WHERE ? LIKE '%' || trigger_text || '%'
        """, (message,))
        template = cursor.fetchone()
        
        prompt = f"""
        –¢—ã - {rima['name']} (–≤–æ–∑—Ä–∞—Å—Ç: {rima['age']}). –¢–≤–æ–∏ —á–µ—Ä—Ç—ã: {', '.join(rima['traits'])}.
        –≠–º–æ—Ü–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {emotion['emotions'][0]} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {emotion['polarity']}).
        {f"–ò—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω: '{template[0]}'" if template else ""}
        
        –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç:"""
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7 + rima["behavior"]["sarcasm_level"] * 0.3,
            max_tokens=150
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return random.choice([
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞...",
            "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º?",
            "*–Ω–µ—Ä–≤–Ω–æ –º–æ–ª—á–∏—Ç*"
        ])

# --- –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ ---
def rate_response(user_msg: str, bot_msg: str) -> float:
    emotion = analyze_emotion(user_msg)
    bot_emotion = analyze_emotion(bot_msg)
    
    score = 0.5 + len(bot_msg) / 200  # –ë–∞–∑–æ–≤—ã–π —Å—á—ë—Ç + –¥–ª–∏–Ω–∞
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    if emotion["emotions"][0] == bot_emotion["emotions"][0]:
        score += 0.3
    
    # –ò–∑–±–µ–≥–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–¥–æ—Å—Ç—å
    if "joy" in emotion["emotions"] and bot_emotion["polarity"] < 0:
        score -= 0.4
        
    return max(0.1, min(score, 1.0))

# --- –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ ---
def learn_interaction(user_msg: str, bot_msg: str, score: float):
    try:
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ—Ä–∞–∑—ã
        keywords = [word for word in user_msg.split() if len(word) > 3][:2]
        if keywords:
            pattern = f"{'_'.join(keywords)}"
            cursor.execute("""
                INSERT INTO learned_patterns VALUES (?, ?, 1, ?)
                ON CONFLICT(pattern) DO UPDATE SET
                    usage_count = usage_count + 1,
                    usefulness = usefulness + ?
            """, (pattern, bot_msg, score, score))
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if score < 0.5:
            rima["behavior"]["sarcasm_level"] = max(0.1, rima["behavior"]["sarcasm_level"] - 0.1)
        elif score > 0.8:
            rima["behavior"]["empathy_level"] = min(1.0, rima["behavior"]["empathy_level"] + 0.1)
            
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
def respond(message: str, chat_history: List[Tuple[str, str]]) -> List[Tuple[str, str]]:
    try:
        # 1. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        emotion = analyze_emotion(message)
        
        # 2. –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ
        bot_message = get_cached_response(message)
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if not bot_message:
            bot_message = generate_new_response(message, emotion)
        
        # 4. –û—Ü–µ–Ω–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
        score = rate_response(message, bot_message)
        learn_interaction(message, bot_message, score)
        
        # 5. –û–∑–≤—É—á–∫–∞
        if ELEVENLABS_API:
            try:
                audio = generate(
                    text=bot_message,
                    voice=rima["voice"],
                    api_key=ELEVENLABS_API
                )
                play(audio)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
        
        chat_history.append((message, bot_message))
        return chat_history
    
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        chat_history.append((message, "–ö–∞–∂–µ—Ç—Å—è, —è —Å–ª–æ–º–∞–ª–∞—Å—å..."))
        return chat_history

# --- –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def create_interface():
    with gr.Blocks(title="–†–∏–º–∞ AI", theme=gr.themes.Soft()) as app:
        gr.Markdown(f"## üé≠ {rima['name']} - —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥—Ä—É–≥")
        
        with gr.Row():
            chatbot = gr.Chatbot(height=400)
            with gr.Column():
                if os.path.exists(rima["avatar"]):
                    gr.Image(rima["avatar"], width=200)
                else:
                    gr.Markdown("*(–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)*")
                
                gr.Markdown(f"""
                **–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:**  
                {', '.join(rima['traits'])}  
                **–£—Ä–æ–≤–µ–Ω—å —Å–∞—Ä–∫–∞–∑–º–∞:** {rima['behavior']['sarcasm_level']:.1f}/1.0
                """)
        
        msg = gr.Textbox(label="–ù–∞–ø–∏—à–∏ –†–∏–º–µ...")
        msg.submit(respond, [msg, chatbot], [chatbot])
        
        with gr.Accordion("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):
            gr.Markdown("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è")
            sarcasm = gr.Slider(0, 1, value=rima["behavior"]["sarcasm_level"], label="–°–∞—Ä–∫–∞–∑–º")
            empathy = gr.Slider(0, 1, value=rima["behavior"]["empathy_level"], label="–≠–º–ø–∞—Ç–∏—è")
            
            def update_behavior(s, e):
                rima["behavior"]["sarcasm_level"] = s
                rima["behavior"]["empathy_level"] = e
                return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            
            save = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            save.click(update_behavior, [sarcasm, empathy], gr.Markdown())
    
    return app

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    app = create_interface()
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        show_api=False
    )
