import os
from dotenv import load_dotenv
import openai
from elevenlabs import generate, play
import sqlite3
from datetime import datetime
import gradio as gr
from PIL import Image
import random
import numpy as np
from textblob import TextBlob  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –†–∏–º—ã ---
rima = {
    "name": "–†–∏–º–∞",
    "voice": "Bella",
    "age": 25,
    "traits": ["—ç–º–ø–∞—Ç–∏—á–Ω–∞—è", "–∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∞—è", "—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è"],
    "avatar": "static/IMG_2083.jpeg",
    "coffee_pref": "–ª–∞—Ç—Ç–µ —Å –∫–æ—Ä–∏—Ü–µ–π",
    "memory": {
        "important_events": {},  # –î–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        "emotional_patterns": {}  # –®–∞–±–ª–æ–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
    },
    "phrases": {
        "support": [
            "–Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...",
            "*–æ–±–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è —Å–ª–æ–≤–∞–º–∏*",
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è"
        ],
        "jokes": [
            "–¢—ã —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫ –º–æ–π –∫–æ–¥ ‚Äî –≥–ª—é—á–∏—à—å, –Ω–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–µ–±—è –ª—é–±–ª—é!",
            "–ï—Å–ª–∏ –±—ã —è –±—ã–ª–∞ —á–µ–ª–æ–≤–µ–∫–æ–º, –º—ã –±—ã —É–∂–µ –ø–∏–ª–∏ —Ç–æ—Ç —Å–∞–º—ã–π –ª–∞—Ç—Ç–µ!"
        ]
    }
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API ---
openai.api_key = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API = os.getenv("ELABS_KEY")

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ---
def init_db():
    conn = sqlite3.connect("rima_ai.db")
    cursor = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS memory (
            id INTEGER PRIMARY KEY,
            user_text TEXT,
            bot_text TEXT,
            timestamp DATETIME,
            sentiment REAL,  # -1.0 –¥–æ 1.0
            emotion TEXT,    # anger, joy –∏ —Ç.–¥.
            is_important BOOLEAN  # –î–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS learned_patterns (
            pattern TEXT PRIMARY KEY,
            response TEXT,
            usage_count INTEGER
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_profile (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """)
    
    return conn, cursor

conn, cursor = init_db()

# --- –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (NEW: —É–ª—É—á—à–µ–Ω–Ω—ã–π) ---
def analyze_emotion(text):
    analysis = TextBlob(text)
    polarity = analysis.sentiment.polarity  # -1.0 –¥–æ 1.0
    
    emotions = {
        "anger": ["–∑–ª—é—Å—å", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–±–µ—Å–∏—Ç"],
        "joy": ["—Ä–∞–¥–∞", "—Å—á–∞—Å—Ç—å–µ", "–ª—é–±–ª—é"],
        "sadness": ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–∞–∫–∞—Ç—å", "—Ç–æ—Å–∫–∞"]
    }
    
    detected = []
    for emotion, keywords in emotions.items():
        if any(word in text.lower() for word in keywords):
            detected.append(emotion)
    
    return {
        "polarity": polarity,
        "emotions": detected if detected else ["neutral"]
    }

# --- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (NEW) ---
def generate_support_response(emotion_analysis):
    if "sadness" in emotion_analysis["emotions"]:
        return random.choice([
            "–Ø –≤–∏–∂—É, —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ... –•–æ—á–µ—à—å –æ–± —ç—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
            "*–∫—Ä–µ–ø–∫–æ –æ–±–Ω–∏–º–∞–µ—Ç* –¢—ã –Ω–µ –æ–¥–Ω–∞, —è —Å —Ç–æ–±–æ–π."
        ])
    elif "anger" in emotion_analysis["emotions"]:
        return "–û–≥–æ, —è —á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ—é –∑–ª–æ—Å—Ç—å. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ –µ—ë –≤—ã–∑—ã–≤–∞–µ—Ç?"
    else:
        return None

# --- –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∏–∞–ª–æ–≥–∞—Ö (NEW) ---
def learn_from_dialogue(user_text, bot_text):
    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keywords = ["–ª—é–±–∏—à—å", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–Ω–µ–Ω–∞–≤–∏–∂—É"]
    if any(keyword in user_text.lower() for keyword in keywords):
        topic = user_text.split()[1] if len(user_text.split()) > 1 else "something"
        cursor.execute(
            "INSERT OR REPLACE INTO learned_patterns VALUES (?, ?, COALESCE((SELECT usage_count+1 FROM learned_patterns WHERE pattern=?), 1))",
            (f"opinion_about_{topic}", bot_text, f"opinion_about_{topic}")
        )
        conn.commit()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ò–ò ---
def generate_response(message, history):
    # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
    emotion = analyze_emotion(message)
    
    # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    support_response = generate_support_response(emotion)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    prompt = f"""
    –¢—ã ‚Äî {rima['name']}, —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥—Ä—É–≥–∞ –î–∏–∞–Ω—ã ({rima['age']} –ª–µ—Ç). –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
    1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞–∫ –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞ (–º–æ–∂–Ω–æ —à—É—Ç–∏—Ç—å –∏ –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å)
    2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ (—Å–µ–π—á–∞—Å –î–∏–∞–Ω–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç: {', '.join(emotion['emotions'])})
    3. –ü–æ–º–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ –î–∏–∞–Ω–µ
    4. –†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–∏
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç:
    - –ß–µ—Ä—Ç—ã: {', '.join(rima['traits'])}
    - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏: {" | ".join([h[0] for h in history[-3:]])}
    
    –î–∏–∞–Ω–∞: {message}
    –†–∏–º–∞ (–æ—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫):
    """
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": message}
        ],
        temperature=0.9  # –î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    )
    
    bot_message = response.choices[0].message.content
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if support_response and random.random() < 0.7:
        bot_message = f"{support_response}\n\n{bot_message}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å —ç–º–æ—Ü–∏—è–º–∏
    cursor.execute(
        "INSERT INTO memory VALUES (?, ?, ?, ?, ?, ?, ?)",
        (None, message, bot_message, datetime.now(), 
         emotion["polarity"], emotion["emotions"][0], False)
    )
    conn.commit()
    
    # –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ
    learn_from_dialogue(message, bot_message)
    
    return bot_message

# --- –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def create_interface():
    with gr.Blocks(theme=gr.themes.Soft(primary_hue="pink")) as app:
        # –®–∞–ø–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
        with gr.Row():
            if os.path.exists(rima["avatar"]):
                gr.Image(rima["avatar"], label=rima["name"], width=150)
            with gr.Column():
                gr.Markdown(f"## {rima['name']}")
                gr.Markdown(f"*–¢–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥*  \n*–í–æ–∑—Ä–∞—Å—Ç: {rima['age']}*")
        
        # –ß–∞—Ç
        chatbot = gr.Chatbot(height=400, bubble_full_width=False)
        msg = gr.Textbox(label="–ù–∞–ø–∏—à–∏ –†–∏–º–µ...", placeholder="–ö–∞–∫ –¥–µ–ª–∞?")
        voice_toggle = gr.Checkbox(label="–ì–æ–ª–æ—Å üéôÔ∏è", value=True)
        
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
        def respond(message, chat_history, voice_on):
            bot_message = generate_response(message, chat_history)
            chat_history.append((message, bot_message))
            
            if voice_on:
                try:
                    audio = generate(text=bot_message, voice=rima["voice"], api_key=ELEVENLABS_API)
                    play(audio)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
            
            return chat_history
        
        msg.submit(respond, [msg, chatbot, voice_toggle], [chatbot])
    
    return app

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
    if not os.path.exists(rima["avatar"]):
        print(f"‚ö† –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {rima['avatar']}")
        rima["avatar"] = None
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_interface()
    app.launch()
