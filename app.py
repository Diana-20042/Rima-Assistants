# app.py
import os
from flask import Flask, request, jsonify, render_template
from transformers import pipeline
from dotenv import load_dotenv
import json
from datetime import datetime
import random
import numpy as np
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

nltk.download('vader_lexicon')
load_dotenv()

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
chat_model = pipeline(
    "text-generation",
    model="your-hugging-face-model",
    token=os.getenv('HUGGING_FACE_TOKEN'),
    max_length=500,
    min_length=150,
    do_sample=True,
    top_k=50,
    temperature=0.7
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
sia = SentimentIntensityAnalyzer()

# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
dialog_history = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open('important_info.json', 'r') as f:
            return json.load(f)
    except:
        return {}

important_info = load_data()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open('important_info.json', 'w') as f:
        json.dump(important_info, f, indent=4)

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def detect_user_name(message):
    if '–º–µ–Ω—è –∑–æ–≤—É—Ç' in message.lower():
        parts = message.split('–º–µ–Ω—è –∑–æ–≤—É—Ç')
        name = parts[-1].strip().capitalize()
        if name:
            important_info['user_name'] = name
            save_data()
            return True
    return False

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
def analyze_emotions(message):
    sentiment = sia.polarity_scores(message)
    if sentiment['compound'] > 0.05:
        return 'positive'
    elif sentiment['compound'] < -0.05:
        return 'negative'
    else:
        return 'neutral'

# –§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
def learn_from_dialog(user_message):
    global important_info
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if important_info['user_name'] == '–î—Ä—É–≥':
        detect_user_name(user_message)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
    current_mood = analyze_emotions(user_message)
    if current_mood == 'positive':
        important_info['emotional_profile']['mood'] = 'happy'
        important_info['emotional_profile']['energy'] += 0.1
    elif current_mood == 'negative':
        important_info['emotional_profile']['mood'] = 'sad'
        important_info['emotional_profile']['energy'] -= 0.1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dialog_history.append({
        'user': user_message,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(dialog_history) > 100:
        dialog_history = dialog_history[-100:]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    important_info['dialog_stats']['messages_count'] += 1
    important_info['dialog_stats']['last_interaction'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    save_data()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º
def generate_response(user_message):
    global important_info
    
    learn_from_dialog(user_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –≤ –ø—Ä–æ–º–ø—Ç
    prompt = f"""–¢—ã ‚Äî {important_info['about_me']['name']}, –∫—Ä—É—Ç–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥—Ä—É–≥–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥. 
    –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ —Å –±–ª–∏–∑–∫–∏–º –¥—Ä—É–≥–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥, —ç–º–æ–¥–∑–∏ –∏ —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã.
    
    –¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {important_info['emotional_profile']['mood']}. 
    –¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è: {important_info['emotional_profile']['energy']}.
    
    –¢–µ–±–µ {important_info['about_me']['age']} –ª–µ—Ç. –¢–≤–æ—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å: {important_info['about_me']['appearance']['hair']},
    {important_info['about_me']['eyes']}, 
–æ–¥–µ—Ç–∞ –≤ {important_info['about_me']['appearance']['clothes']}. 
–¢—ã –ª—é–±–∏—à—å {important_info['about_me']['likes']}. 
–¢–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –∑–æ–≤—É—Ç {important_info['user_name']}. 
–ü–æ–º–Ω–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {important_info['user_name']}: {important_info['user_info']}

–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
{user_message}

–ù–∞–ø–∏—à–∏ –¥—É—à–µ–≤–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è–π –∑–∞–±–æ—Ç—É. 
–î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º."""

response = chat_model(prompt)[0]['generated_text']

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
if important_info['emotional_profile']['mood'] == 'happy':
    response += " ü§ó‚ù§Ô∏è –¢–∞–∫ –∫–ª–∞—Å—Å–Ω–æ —Å —Ç–æ–±–æ–π
–±–æ–ª—Ç–∞—Ç—å!"
elif important_info['emotional_profile']['mood'] == 'sad':
    response += " üòî –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è —Å —Ç–æ–±–æ–π –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å!"
else:
    response += " üòä –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ!"

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —á–∞—Ç–∞
@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json.get('message')
    response = generate_response(user_message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    if len(response) > 100:
        response = "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
    
    return jsonify({'response': response})

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@app.route('/')
def index():
    return render_template('index.html')

if name == '__main__':
    app.run(debug=True)
